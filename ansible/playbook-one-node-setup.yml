# Following node installation instructions from
# http://docs.opennebula.org/5.4/deployment/node_installation/kvm_node_installation.html

- hosts: one
  strategy: linear
  serial:   3
  become:   yes
  vars:

  pre_tasks:
    - name: Step 1. Add OpenNebula Repositories
      yum_repository:
        baseurl:     "https://downloads.opennebula.org/repo/{{ opennebula_version }}/CentOS/$releasever/$basearch"
        description: opennebula
        enabled:     yes
        gpgcheck:    yes
        gpgkey:      https://downloads.opennebula.org/repo/repo.key
        name:        opennebula
        state:       present

    - name: Step 2. Installing the Software
      yum:
        name:  "{{ item }}"
        state: present
      with_items:
        - opennebula-node-kvm

    - name: Configure DATASTORE_LOCATION to point to the glusterfs mount - opennebula seems to ignore anything other than /var/lib/one/datastores
      lineinfile:
        dest:   config
        regexp: "DATASTORE_LOCATION=/var/lib/one/datastores"
        line:   "DATASTORE_LOCATION=/var/lib/one/datastores"
        state:  present
      become:      yes
      become_user: oneadmin
 
    - name: Step 2. Installing the Software - restart libvirt
      service:
        name:     "{{ item }}"
        state:    started
        enabled:  true
      with_items:
        - libvirtd

    - name: Step 3. Disable SElinux
      selinux:
        policy: targeted
        state:  permissive

    - name: Step 4. Configure Passwordless SSH - create the known_hosts file
      shell:       "ssh-keyscan {{ groups['one'] | join(' ') }} > /var/lib/one/.ssh/known_hosts"
      args:
        creates: /var/lib/one/.ssh/known_hosts
      become:      yes
      become_user: oneadmin
      run_once: true

    - name: Step 4. Configure Passwordless SSH - fetch public key - always run (non-idempotent)
      shell:    cat /var/lib/one/.ssh/id_rsa.pub
      register: ssh_public_key

    - name: Step 4. Configure Passwordless SSH - deploy public key
      authorized_key:
        user: oneadmin
        key:  "{{ item[0] }}"
      delegate_to: "{{ item[1] }}"
      with_nested:
        - "{{ ssh_public_key.stdout }}"
        - "{{ groups['one'] }}"

    - name: Make the initial ssh connection with StrictHostKeyChecking=no to accept public host key - always run (non-idempotent)
      command:     "ssh -o StrictHostKeyChecking=no oneadmin@{{ item[0] }} hostname"
      become:      yes
      become_user: oneadmin
      delegate_to: "{{ item[1] }}"
      with_nested:
        - "{{ groups['one'] }}"
        - "{{ groups['one'] }}"

  roles:

  tasks:

  post_tasks:
